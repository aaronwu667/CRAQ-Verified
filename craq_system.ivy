#lang ivy1.7

include spec
include trans

isolate system = {
    object server(self: node) = {
	function dBitMap(K: key) : bool
	function highestVersion(K: key) : ver_num.t
	function mvMap(K: key_tups.t) : value
	individual ver_no: ver_num.t
	individual req_no: req_num.t

	action set(k: key, d: value)
	action get(k:key)
	action tail_commit(rq: query)

	import action answer(k: key, v: value, id: req_num.t)
	
	after init {
	    dBitMap(K) := false;
	    highestVersion(K) := 0
	}

	implement set(k: key, v: value) {
            var q: query;
            q.qkey := k;
            q.qtype := write;
            q.qvalue := v;
            q.qsrc := self;
	    q.qid := req_no;
	    req_no := req_no.next;

	    
            if self = 0 {
		ver_no := ver_no.next;
		q.qvnum := ver_no;
		
		var key_pair : key_tups.t;
		key_pair.x := k;
		key_pair.y := ver_no;
		mvMap(key_pair) := v;
		highestVersion(k) := ver_no;
		
		if ~(self = node.max) {
		    dBitMap(k) := true;
		    call trans.send_request(self, self.next, q);
		} else {
		    call tail_commit(q)
		}
            } else {
		call trans.send_request(self, 0, q);
            }
	}

	implement trans.handle_request(rq: query) {
	    # assert rq.qtype = write
	    if self = 0 {
		call set(rq.qkey, rq.qvalue)
	    } else { 
		var key_pair : key_tups.t;
		key_pair.x := rq.qkey;
		key_pair.y := rq.qvnum;

		mvMap(key_pair) := rq.qvalue;

		# Safe because network messages delivered in-order
		highestVersion(rq.qkey) := rq.qvnum;
		
		if ~(self = node.max) {
		    # Update dirty bit map only on non-tail nodes
		    dBitMap(rq.qkey) := true;
		    
		    call trans.send_request(self, self.next, rq)
		} else {
		    call tail_commit(rq)
		}
	    }
	}

	implement tail_commit(rq: query) {
	    call spec.commit(rq, rq);
	    call trans.send_reply(self, self, rq)
	}
	
	implement get(k:key) {
            var q: query;
            q.qkey := k;
            q.qtype := read;
            q.qsrc := self;
	    q.qid := req_no;
	    req_no := req_no.next;

            if ~dBitMap(k) {
		# tail always takes this branch,
		# since its dBitMap is never changed
		var rep := q;

		var key_pair : key_tups.t;
		key_pair.x := k;
		key_pair.y := highestVersion(k);

		# 0 is the default value
		rep.qvalue := mvMap(key_pair);

		call spec.commit(q, rep);
		call trans.send_reply(self, self, rep);
            } else {
		# Send inquire message to tail
		call trans.send_inquire(self, node.max, q);
            }
	}

	implement trans.handle_reply(rq: query) {
            call answer(rq.qkey, rq.qvalue, rq.qid);
        }

	implement trans.handle_inform(rq: query) {
	    var rep : query;
	    rep.qkey := rq.qkey;
	    rep.qtype := rq.qtype;
	    rep.qsrc := self;
	    rep.qid := rq.qid;
	    rep.qvnum := rq.qvnum;
	    
	    if highestVersion(rq.qkey) = rq.qvnum {
		dBitMap(rq.qkey) := false
	    };
	    var key_pair : key_tups.t;
	    key_pair.x := rq.qkey;
	    key_pair.y := rq.qvnum;
	    
	    # rep.qvalue := mvMap.get(key_pair);
	    rep.qvalue := mvMap(key_pair);
	    call spec.commit(rep, rep);
	    call trans.send_reply(self, self, rep)
	}

	implement trans.handle_inquire(rq: query) {
	    # assert self = node.max
	    var rep : query;
	    rep.qkey := rq.qkey;
	    rep.qtype := rq.qtype;
	    rep.qid := rq.qid;	    
	    rep.qsrc := self;
	    rep.qvnum := highestVersion(rq.qkey);
	    
	    call trans.send_inform(self, rq.qsrc, rep)
	}
    }

    
} with spec, trans, node, key_tups, req_num, ver_num

export system.server.set
export system.server.get

extract impl(me: node) = system.server(me), trans(me), net(me), node, impl_interp, ver_num, req_num
