#lang ivy1.7

include spec
include trans

isolate system = {
    object server(self: node) = {
	function dBitMap(K: key) : bool
	function highestVersion(K: key) : ver_num.t
	instance mvMap : ordered_map(key_tups, value)
	individual ver_no: ver_num.t

	action set(k: key, d: value)
	action get(k:key)

	import action answer(k: key, v: value)
	
	after init {
	    dBitMap(K) := false;
	    highestVersion(K) := 0
	}

	implement set(k: key, v: value) {
            var q: query;
            q.qtype := write;
            q.qkey := k;
            q.qvalue := v;
            q.qsrc := self;
	    

            if self = 0 {
		ver_no := ver_no.next;
		q.qvnum := ver_no;

		var key_pair : key_tups.t;
		key_pair.x := k;
		key_pair.y := ver_no;
		mvMap.set(key_pair, v);

		dBitMap(k) := true;
		highestVersion(k) := ver_no;

		call trans.send_request(self, self.next, q);
            } else {
		call trans.send_request(self, 0, q);
            }
	}

	implement trans.handle_request(rq: query) {
	    # assert rq.qtype = write
	    if self = 0 {
		call set(rq.qkey, rq.qvalue)
	    } else { 
		var key_pair : key_tups.t;
		key_pair.x := rq.qkey;
		key_pair.y := rq.qvnum;

		mvMap.set(key_pair, rq.qvalue);
		
		# Update dirty bit map
		dBitMap(rq.qkey) := true;
		
		# Safe because network messages delivered in-order
		highestVersion(rq.qkey) := rq.qvnum;
		
		# Forward query
		call trans.send_request(self, self.next, rq)
	    }
	}
	
	implement get(k:key) {
            var q: query;
            q.qkey := k;
            q.qtype := read;
            q.qsrc := self;

            if ~dBitMap(k) {
		var rep := q;

		var key_pair : key_tups.t;
		key_pair.x := k;
		key_pair.y := highestVersion(k);

		# 0 is the default value
		rep.qvalue := mvMap.get(key_pair, 0);

		call spec.commit(q, rep);
		call trans.send_reply(self, self, rep);
            } else {
		# Send inquire message to tail
		call trans.send_inquire(self, node.max, q);
            }
	}

	implement trans.handle_reply(q: query) {
            call answer(q.qkey, q.qvalue);
        }
    }    
} with spec, trans, node, key_tups
