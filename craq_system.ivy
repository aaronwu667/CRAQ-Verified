#lang ivy1.7

include spec
include trans

isolate system = {
    object server(self: node) = {
	function dBitMap(K: key) : bool
	function highestVersion(K: key) : ver_num.t
	instance mvMap : ordered_map(key_tups, value)
	individual req_no: req_num.t
	individual ver_no: ver_num.t

	action set(k: key, d: value)
	action get(k:key)

	import action answer(k: key, v: value, id: req_num.t)
	
	after init {
	    dBitMap(K) := false;
		highestVersion(K) := 0
	}

	implement set(k: key, v: value) {
            var q: query;
            q.qid := req_no;
            q.qtype := read;
            q.qkey := k;
            q.qvalue := v;
            q.qsrc := self;
            q.qvnum := 0; # unused

            req_no := req_no.next;

            if self = 0 {
		ver_no := ver_no.next;
		q.qvnum := ver_no;

		var key_pair : key_tups.t;
		key_pair.x := k;
		key_pair.y := ver_no;
		mvMap.set(key_pair, v);

		dBitMap(k) := true;
		highestVersion(k) := ver_no;

		var next_node : node;
		next_node := self.next;

		call trans.send_request(self, next_node, q);
            } else {
		call trans.send_request(self, 0, q);
            }
	}

    implement get(k:key) {
        var q: query;
        q.qid := req_no;
        q.qkey := k;
        q.qtype := write;
        q.qvalue := 0; # unused
        q.qsrc := self;

        req_no := req_no.next;

        if dBitMap(k) {
			var rep := q;

			var key_pair : key_tups.t;
			key_pair.x := k;
			key_pair.y := highestVersion(k);

			# 0 is the default value
			rep.qvalue := mvMap.get(key_pair, 0);

			call spec.commit(q, rep);

			# This may need to be changed if we want to
			# send reply to the node that received the client message
            call trans.send_reply(self, self, rep);
        } else {
            # Send inquire message to tail
            call trans.send_inquire(self, node.max, q);
        };
    }

	    implement trans.handle_reply(q: query) {
            call answer(q.qkey, q.qvalue, q.qid);
        }
    }    
} with spec, trans, node, key_tups
