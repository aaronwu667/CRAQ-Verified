#lang ivy1.7

include spec
include trans

isolate system = {
    object server(self: node) = {
	function dBitMap(K: key) : bool
	function highestVersion(K: key) : ver_num.t
	function mvMap(K: key_tups.t) : value
	function viewMap(K: key) : value
	individual ver_no: ver_num.t
	individual req_no: req_num.t

	action set(k: key, d: value)
	action get(k:key)

	import action answer(k: key, v: value, id: req_num.t)
	
	after init {
	    dBitMap(K) := false;
	    highestVersion(K) := 0;
	    mvMap(K) := 0;
	    viewMap(K) := 0;
	}

	implement set(k: key, v: value) {
            var q: query;
            q.qkey := k;
            q.qtype := write;
            q.qvalue := v;
            q.qsrc := self;
	    q.qid := req_no;
	    req_no := req_no.next;
	    
            if self = 0 {
		ver_no := ver_no.next;
		q.qvnum := ver_no;
		
		var key_pair : key_tups.t;
		key_pair.x := k;
		key_pair.y := ver_no;
		mvMap(key_pair) := v;
		highestVersion(k) := ver_no;
		
		if ~(self = node.max) {
		    dBitMap(k) := true;
		    call trans.send_request(self, self.next, q);
		} else {
		    # tail commit
		    viewMap(k) := v;
		    call spec.commit(q, q);
		    call trans.send_reply(self, self, q);
		    call trans.send_commitAck(self, self, q)
		}
            } else {
		call trans.send_request(self, 0, q);
            }
	}
        
	implement trans.handle_request(rq: query) {
	    # assert rq.qtype = write
	    if self = 0 {
		call set(rq.qkey, rq.qvalue)
	    } else { 
		var key_pair : key_tups.t;
		key_pair.x := rq.qkey;
		key_pair.y := rq.qvnum;

		mvMap(key_pair) := rq.qvalue;

		# Safe because network messages delivered in-order
		highestVersion(rq.qkey) := rq.qvnum;
		
		if ~(self = node.max) {
		    # Update dirty bit map only on non-tail nodes
		    dBitMap(rq.qkey) := true;
		    
		    call trans.send_request(self, self.next, rq)
		} else {
		    # tail commit
		    viewMap(rq.qkey) := rq.qvalue;
		    call spec.commit(rq, rq);
		    call trans.send_reply(self, self, rq);
		    call trans.send_commitAck(self, self, rq)		    
		}
	    }
	}

	implement trans.handle_commitAck(rq: query){
	    if (~(self = node.max) & highestVersion(rq.qkey) = rq.qvnum) {
		assume rq.qvalue = server(node.max).viewMap(rq.qkey);
		dBitMap(rq.qkey) := false;
		viewMap(rq.qkey) := rq.qvalue
	    }
	    if ~(self=0:node) {
		call trans.send_commitAck(self, self.prev, rq)
	    }
	}
	
	implement get(k:key) {
            var q: query;
            q.qkey := k;
            q.qtype := read;
            q.qsrc := self;
	    q.qid := req_no;
	    req_no := req_no.next;

            if ~dBitMap(k) {
		# tail always takes this branch,
		# since its dBitMap is never changed
		q.qvnum := highestVersion(k);
		var rep := q;

		var key_pair : key_tups.t;
		key_pair.x := k;
		key_pair.y := highestVersion(k);

		# 0 is the default value
		#rep.qvalue := mvMap(key_pair);
		rep.qvalue := viewMap(k);

		call spec.commit(q, rep);
		call trans.send_reply(self, self, rep);
            } else {
		# Send inquire message to tail
		call trans.send_inquire(self, node.max, q);
            }
	}

	implement trans.handle_reply(rq: query) {
            call answer(rq.qkey, rq.qvalue, rq.qid);
        }

	implement trans.handle_inform(rq: query) {
	    assume dBitMap(rq.qkey) = true;
	    var rep : query;
	    rep.qkey := rq.qkey;
	    rep.qtype := rq.qtype;
	    rep.qsrc := rq.qsrc;
	    rep.qid := rq.qid;
	    rep.qvnum := rq.qvnum;
	    
	    if highestVersion(rq.qkey) = rq.qvnum {
		dBitMap(rq.qkey) := false
	    };
	    var key_pair : key_tups.t;
	    key_pair.x := rq.qkey;
	    key_pair.y := rq.qvnum;

	    viewMap(rq.qkey) := mvMap(key_pair);
	    rep.qvalue := viewMap(rq.qkey);
	    
	    call spec.commit(rep, rep);
	    call trans.send_reply(self, self, rep)
	}

	implement trans.handle_inquire(rq: query) {
	    var rep : query;
	    rep.qkey := rq.qkey;
	    rep.qtype := rq.qtype;
	    rep.qid := rq.qid;	    
	    rep.qsrc := rq.qsrc;
	    rep.qvnum := highestVersion(rq.qkey);
	    
	    call trans.send_inform(self, rq.qsrc, rep)
	}
    }

    invariant [safety] trans.replied(R, D) -> spec.replies(R)

    # Manually added invariants from SHT
    invariant ~(trans.requested(R1, D1) & trans.replied(R2, D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2))
    invariant trans.requested(R1, D1) & trans.requested(R2, D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2) -> R1 = R2 & D1 = D2
    invariant trans.requested(R, D) -> query.qid(R) < server(query.qsrc(R)).req_no
    invariant trans.acked(R,D) -> query.qid(R) < server(query.qsrc(R)).req_no
    invariant trans.acked(R,D) -> query.qvnum(R) <= server(node.max).highestVersion(query.qkey(R))
    invariant trans.replied(R, D) -> query.qid(R) < server(query.qsrc(R)).req_no
    
    invariant ~(trans.inquired(R1, D1) & trans.replied(R2, D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2))
    invariant ~(trans.informed(R1, D1) & trans.replied(R2, D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2))
    invariant trans.inquired(R, D) -> ~(query.qsrc(R) = node.max)
    invariant trans.inquired(R, D) -> query.qid(R) < server(query.qsrc(R)).req_no
    invariant trans.inquired(R,D) -> D = node.max
    invariant ~(trans.inquired(R1, D1) & trans.informed(R2, D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2))
    
    # Relevant IC3PO invariants from SHT
    invariant (forall N1, R1.(spec.requests(R1) -> ~trans.requested(R1, N1)))
    invariant (forall R1.(spec.requests(R1) -> (query.qid(R1) < system.server.req_no(query.qsrc(R1)))))
    invariant (forall N1, R1.(trans.requested(R1, N1) -> ((read = query.qtype(R1)) | (write = query.qtype(R1)) | (read = write))))

    # Additional manually added invariants
    invariant trans.informed(R,D) -> query.qid(R) < server(query.qsrc(R)).req_no
    invariant ~(trans.informed(R,D) & query.qsrc(R) = node.max)
    invariant ~(trans.informed(R,D) & D = node.max)
    invariant server(node.max).dBitMap(K) = false

    invariant trans.replied(R,D) -> 
    (query.qtype(R) = read & query.qvnum(R) <= server(query.qsrc(R)).highestVersion(query.qkey(R)) 
    | (query.qtype(R) = write & query.qvnum(R) <= server(N).highestVersion(query.qkey(R))))
    
    # initialization does not respect implicit ordering on queries
    invariant server(N).highestVersion(K) <= server(0).ver_no

    invariant trans.inquired(R,D) -> query.qtype(R) = read
    invariant trans.informed(R,D) -> query.qtype(R) = read
    invariant trans.requested(R,D) -> query.qtype(R) = write
    invariant trans.acked(R,D) -> query.qtype(R) = write

    # this property isn't true for inquire messages
    invariant trans.informed(R,D) -> query.qvnum(R) <= server(N).highestVersion(query.qkey(R))
    invariant trans.replied(R,D) -> query.qvnum(R) <= server(N).highestVersion(query.qkey(R))
    invariant (trans.requested(R,D) & ~(D = 0) & (N < D)) -> query.qvnum(R) <= server(N).highestVersion(query.qkey(R))

    invariant ~(trans.requested(R1,D1) & trans.inquired(R2,D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2))
    invariant ~(trans.requested(R1,D1) & trans.informed(R2,D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2))

    invariant trans.informed(R1, D1) & trans.informed(R2, D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2) -> R1 = R2 & D1 = D2
    invariant trans.inquired(R1, D1) & trans.inquired(R2, D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2) -> R1 = R2 & D1 = D2
    invariant trans.replied(R1, D1) & trans.replied(R2, D2) & query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2) -> R1 = R2 & D1 = D2

    invariant [issue1] (server(N).highestVersion(K) > server(node.max).highestVersion(K)) -> (server(N).dBitMap(K) = true)
    invariant [issue2] (0 <= N & N < M & M <= node.max) -> (server(N).highestVersion(K) >= server(M).highestVersion(K))

    invariant (trans.requested(R,D) & ~(D = 0)) -> query.qvnum(R) > server(D).highestVersion(query.qkey(R))
    invariant (trans.requested(R1,D1) & trans.requested(R2,D2) & ~(D1 = 0) & ~(D2 = 0) & ~(query.qsrc(R1) = query.qsrc(R2) & query.qid(R1) = query.qid(R2)))
    -> (query.qvnum(R1) ~= query.qvnum(R2))

    invariant server(node.max).viewMap(K) = spec.map(K)
    invariant ~server(N).dBitMap(K) -> (server(N).viewMap(K) = server(node.max).viewMap(K) & server(N).viewMap(K) = spec.map(K))

} with spec, trans, node, key_tups, req_num, ver_num

export system.server.set
export system.server.get

extract impl(me: node) = system.server(me), trans(me), net(me), node, impl_interp, ver_num, req_num
