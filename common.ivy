#lang ivy1.7

include seq_num
include collections
include pair

type key
type value
instance ver_num : seq_num
instance req_num : seq_num
instance msg_num : seq_num

instance node : iterable

# Likely not possible to have key |-> (dBit, ordered_map) in ivy
# Flatten and have ordered map (key, ver_num) |-> value and function key |-> dBit
instance key_tups : pair(key, ver_num.t)

object impl_interp = {
    interpret key -> bv[64]
    interpret value -> strlit
}

type query_type = {read, write}

object query = {
    type this = struct {
        qid : req_num.t, # used to uniquely identify the query
        qkey : key,
        qtype : query_type,
        qvalue : value,
        qsrc: node,
        qvnum: ver_num.t # version number
    }
}

# This section needs to be completed later
object msg_type = {
    type this = {request, reply, inquire, inform, ack}
}
# type msg_type = {request, reply, inquire, inform, ack}
object msg = {
    type this = struct {
	t: msg_type,
	src: node,
	msgnum: msg_num.t, # ordering in message channel between src and dest
	body: query
    }
}

alias request_query = query
alias reply_query = query

# TBD: additional messages and network decls
