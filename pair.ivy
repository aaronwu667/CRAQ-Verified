#lang ivy1.7

include order 

# Module for (totally) lexicographically ordered pairs. 
module pair(t1, t2) = {
    object t = {
	type this = struct {
	    x : t1,
	    y : t2
	}
    }
    
    object spec = {
	# Assume that struct fields are totally ordered
	axiom [transitivityT1] X:t1 < Y & Y < Z -> X < Z
	axiom [antisymmetryT1] ~(X:t1 < X)
	axiom [totalityT1] X:t1 < Y | X = Y | Y < X

	axiom [transitivityT2] X:t2 < Y & Y < Z -> X < Z
	axiom [antisymmetryT2] ~(X:t2 < X)
	axiom [totalityT2] X:t2 < Y | X = Y | Y < X
	
	# Lexicographic ordering
	relation (I: t < J : t)
	definition (I: t < J : t) = I.x < J.x | (I.x = J.x & I.y < J.y)
    }

    # total ordering
    instantiate total_order : totally_ordered(t)

    # iteration over pairs
    instantiate iter : order_iterator(this)

    isolate pair_iso = t, spec, total_order, iter
}


object testPair = {
    type k
    type v
    interpret k -> bv[16]
    interpret v -> bv[16]
    instance p : pair(k, v)
    after init {
	var one : p.t;
	var two : p.t;
	one.x := 1;
	two.x := 1;
	one.y := 2;
	two.y := 3;
	assert(one <= two);
	one.y := 3;
	#assert(one < two);
	assert(one = two);
	one.y := 4;
	assert(two < one)
    }
}

