#lang ivy1.7

include common

isolate spec = {
    relation requests(R:request)
    relation replies(R:reply)
    function map(K:key) : ver_value

    action invokeResponse(req: request, repl: reply)
    
    after init {
	# Abstract "default" value
	map(K: key).val := 0;
	map(K: key).vnum := 0;
	requests(R: request) := false;
	replies(R: reply) := false
    }

    specification {
	before invokeResponse(req: request, repl: reply) {
	    require req.t = repl.t;
	    require req.k = repl.k;
	    require req.id = repl.id;
	}
    }
    
    implementation {
	# Service's response to client
	implement invokeResponse(req: request, repl: reply) {
	    var checkDat : value;
	    var checkVnum : ver_num.t;
	    if req.t = put {
		checkDat := req.dat;
		checkVnum := ver_num.next(map(req.k).vnum) 
	    } else {
		checkDat := map(req.k).val;
		checkVnum := repl.rvnum
	    }
	    
	    if ~requests(repl)
	    & repl.dat = checkDat
	    & repl.rvnum = checkVnum {
		if req.t = put {
		    # Update map
		    map(req.k).val := req.dat;
		    map(req.k).vnum := req.rvnum	
		}
		requests(repl) := true;
		replies(repl) := true	
	    }
	}
    }
} with ver_num
